<resources>
    <string name="app_name">LearnAndroid</string>
    <string name="Open">LearnAndroid</string>
    <string name="Close">LearnAndroid</string>

    <!--formatting of strings using HTML: which is translated via a html set text method-->
    <!--text content has been sourced from the official android developers web page-->

    <string name="Intro_Sring">
        <![CDATA[
        <html><body>
        <h2>WECLOME</h2>

        <p>
        This application is built to
        educate you on the five key components of Android. The five topics covered include: <b>1. Activities, 2. Services,
         3. Content Providers, 4. Broadcast Receivers and 5. Activity Lifecycle</b>. <p>Each topic will display a video and
         text to provide a comprehensive understanding of each topic. After completing the topics, test your
         knowledge on the multiple-choice section and challenge yourself by increasing the difficulty each attempt.
         </p>

         <p>
         <b>Click on the navigation drawer in the top left corner to begin your learning experience.<b>
         </p>

        </p></body></html>]]>
    </string>

    <!--String Source from Android - Activities @developer.android.com/guide/components/activities/-->
    <string name="Lesson1_String">
        <![CDATA[
        <html><body>
        <p> An activity is a single, focused thing that the user can do. Almost all activities interact with the user,
        so the Activity class takes care of creating a window for you in which you can place your UI with setContentView(View).</p>

         <p>While activities are often presented to the user as full-screen windows, they can also be used in other ways: as floating

          windows (via a theme with R.attr.windowIsFloating set) or embedded inside of another activity (using ActivityGroup).
        There are two methods almost all subclasses of Activity will implement:</p>

        <ul>
         <li>onCreate(Bundle) is where you initialize your activity. Most importantly, here you will usually call setContentView(int) with
         a layout resource defining your UI, and using findViewById(int) to retrieve the widgets in that UI that you need to interact with
         programmatically.</li>
        <li>onPause() is where you deal with the user leaving your activity. Most importantly, any changes made by the user should at this
        point be committed (usually to the ContentProvider holding the data).</li>

        <p>
        To be of use with Context.startActivity(), all activity classes must have a corresponding activity declaration in their package's
        AndroidManifest.xml.
        </p></body></html>]]>
    </string>

    <!--String Source from Android - Services @developer.android.com/guide/components/services-->
    <string name="Lesson2_String">
        <![CDATA[
        <html><body>

        <p>Service is an application component that can perform long-running operations in the background, and it doesn\'t provide a user interface. Another application component can start a service, and it continues to run in the background even if the user switches to another application. Additionally, a component can bind to a service to interact with it and even perform interprocess communication (IPC). For example, a service can handle network transactions, play music, perform file I/O, or interact with a content provider, all from the background.
        These are the three different types of services: </p>
        <ul>
        <li>
        Foreground
        A foreground service performs some operation that is noticeable to the user. For example, an audio app would use a foreground service to play an audio track. Foreground services must display a Notification. Foreground services continue running even when the user isn\'t interacting with the app.
        </li>
        <li>
        Background
        A background service performs an operation that isn\'t directly noticed by the user. For example, if an app used a service to compact its storage, that would usually be a background service.
        </li>
        <li>
        Bound
        A service is bound when an application component binds to it by calling bindService(). A bound service offers a client-server interface that allows components to interact with the service, send requests, receive results, and even do so across processes with interprocess communication (IPC). A bound service runs only as long as another application component is bound to it. Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed.
        </li>
        <p>
        Although this documentation generally discusses started and bound services separately, your service can work both ways—it can be started (to run indefinitely) and also allow binding. It's simply a matter of whether you implement a couple of callback methods: onStartCommand() to allow components to start it and onBind() to allow binding.
        Regardless of whether your service is started, bound, or both, any application component can use the service (even from a separate application) in the same way that any component can use an activity—by starting it with an Intent. However, you can declare the service as private in the manifest file and block access from other applications. This is discussed more in the section about Declaring the service in the manifest.

    </p></body></html>]]>
    </string>


    <!--String Source from Android - Broadcast Receivers @developer.android.com/reference/android/content/BroadcastReceiver-->
    <string name="Lesson3_String">
        <![CDATA[
        <html><body>
        <p>
        Android apps can send or receive broadcast messages from the Android system and other Android apps, similar to the publish-subscribe design pattern. These broadcasts are sent when an event of interest occurs. For example, the Android system sends broadcasts when various system events occur, such as when the system boots up or the device starts charging. Apps can also send custom broadcasts, for example, to notify other apps of something that they might be interested in (for example, some new data has been downloaded).
        Apps can register to receive specific broadcasts. When a broadcast is sent, the system automatically routes broadcasts to apps that have subscribed to receive that particular type of broadcast.
        </p>
        <p>
        Generally speaking, broadcasts can be used as a messaging system across apps and outside of the normal user flow. However, you must be careful not to abuse the opportunity to respond to broadcasts and run jobs in the background that can contribute to a slow system performance, as described in the following video.
        </p>
        <p>
        About system broadcasts
        </p>
        <ul>
        <li>
        The system automatically sends broadcasts when various system events occur, such as when the system switches in and out of airplane mode.
        </li><li>System broadcasts are sent to all apps that are subscribed to receive the event.
        </li><li>The broadcast message itself is wrapped in an Intent object whose action string identifies the event that occurred (for example android.intent.action.AIRPLANE_MODE). The intent may also include additional information bundled into its extra field. For example, the airplane mode intent includes a boolean extra that indicates whether or not Airplane Mode is on.
        <p>For more information about how to read intents and get the action string from an intent, see Intents and Intent Filters.
        For a complete list of system broadcast actions, see the BROADCAST_ACTIONS.TXT file in the Android SDK. Each broadcast action has a constant field associated with it. For example, the value of the constantACTION_AIRPLANE_MODE_CHANGED is android.intent.action.AIRPLANE_MODE. Documentation for each broadcast action is available in its associated constant field.

    </p></body></html>]]>
    </string>

    <!--String Source from Android - Content Provider @developer.android.com/guide/topics/providers/content-providers -->
    <string name="Lesson4_String">
        <![CDATA[
        <html><body>
        <p>
        Content providers can help an application manage access to data stored by itself, stored by other apps, and provide a way to share data with other apps. They encapsulate the data, and provide mechanisms for defining data security. Content providers are the standard interface that connects data in one
        process with code running in another process. Implementing a content provider has many advantages. Most importantly you can configure a content provider to allow other applications to securely access and modify your app data.Use content providers if you plan to share data. If you
        don’t plan to share data, you may still use them because they provide a nice abstraction, but you don’t have to. This abstraction allows you to make modifications to your application data storage implementation without affecting other existing applications that rely on access to your data. In this scenario only your content provider is affected and not the applications that access it. For example, you might swap out a SQLite database for alternative storage
        </p><p>A number of other classes rely on the ContentProvider class:</p>
        <ul>
        <li>AbstractThreadedSyncAdapter</li>
        <li>CursorAdapter</li>
        <li>CursorLoader</li>
        <p>If you are making use of any of these classes you also need to implement a content provider in your application. Note that when working with the sync adapter framework you can also create a stub content provider as an alternative. For more information about this topic, see Creating a stub content provider. In addition, you need your own content provider in the following cases:</p>
          <ul><li>You want to implement custom search suggestions in your application</li>
        <li>You need to use a content provider to expose your application data to widgets</li>
        <li>You want to copy and paste complex data or files from your application to other applications</li>
        <p>
        The Android framework includes content providers that manage data such as audio, video, images, and personal contact information. You can see some of them listed in the reference documentation for the android.providerpackage. With some restrictions, these providers are accessible to any Android application.
        A content provider can be used to manage access to a variety of data storage sources, including both structured data, such as a SQLite relational database, or unstructured data such as image files. For more information on the types of storage available on Android, see Storage options, as well as Designing data storage.
        </p></body></html>]]>
    </string>

    <!--String Source from Android - Activity Lifecycle @developer.android.com/guide/components/activities/activity-lifecycle -->
    <string name="Lesson5_String"><![CDATA[

        <html><body>
        <p>
        Activities in the system are managed as an activity stack. When a new activity is started, it is placed on the top of the stack and becomes the running activity — the previous activity always remains below it in the stack, and will not come to the foreground again until the new activity exits.
        An activity has essentially four states:
        </p>
        <ul>

        <li>	If an activity is in the foreground of the screen (at the top of the stack), it is active or running. </li>
        <li>If an activity has lost focus but is still visible (that is, a new non-full-sized or transparent activity has focus on top of your activity), it is paused. A paused activity is completely alive (it maintains all state and member information and remains attached to the window manager), but can be killed by the system in extreme low memory situations. </li>
        <li>If an activity is completely obscured by another activity, it is stopped. It still retains all state and member information, however, it is no longer visible to the user so its window is hidden and it will often be killed by the system when memory is needed elsewhere.</li>
        <li>If an activity is paused or stopped, the system can drop the activity from memory by either asking it to finish, or simply killing its process. When it is displayed again to the user, it must be completely restarted and restored to its previous state. </li>
        <p>There are three key loops you may be interested in monitoring within your activity:</p>
        <ul><li>The entire lifetime of an activity happens between the first call to onCreate(Bundle) through to a single final call to onDestroy(). An activity will do all setup of "global" state in onCreate(), and release all remaining resources in onDestroy(). For example, if it has a thread running in the background to download data from the network, it may create that thread in onCreate() and then stop the thread in onDestroy(). </li>
        <li>The visible lifetime of an activity happens between a call to onStart() until a corresponding call toonStop(). During this time the user can see the activity on-screen, though it may not be in the foreground and interacting with the user. Between these two methods you can maintain resources that are needed to show the activity to the user. For example, you can register a BroadcastReceiver in onStart() to monitor for changes that impact your UI, and unregister it in onStop() when the user no longer sees what you are displaying. The onStart() and onStop() methods can be called multiple times, as the activity becomes visible and hidden to the user. </li>
        <li>The foreground lifetime of an activity happens between a call to onResume() until a corresponding call toonPause(). During this time the activity is in front of all other activities and interacting with the user. An activity can frequently go between the resumed and paused states — for example when the device goes to sleep, when an activity result is delivered, when a new intent is delivered — so the code in these methods should be fairly lightweight. </li>
        <p></p>
         </body></html>
        ]]>
    </string>


</resources>
